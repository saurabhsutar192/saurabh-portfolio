---
interface Props {
  className?: string;
}

const { className } = Astro.props;
---

<div class={`dark-card ${className}`}>
  <slot />
  <div class="cursor-blob"></div>
</div>

<style lang="scss" is:global>
  @use "@/styles/abstract" as *;

  .dark-card {
    border-radius: 1rem;
    background: $dark-text;
    color: $light-bg;
    position: relative;
    overflow: hidden;
    z-index: 0;

    .cursor-blob {
      position: absolute;
      top: 0;
      left: 0;
      z-index: -1;
      transform: scale(0);
      transform-origin: center center;
      background: $primary-accent;
      height: 10rem;
      width: 10rem;
      border-radius: 50%;
    }
  }
</style>

<script>
  import gsap from "gsap";

  const darkCard = document.querySelectorAll(
    ".dark-card"
  ) as NodeListOf<HTMLDivElement>;

  darkCard.forEach((card) => {
    const blob = card?.querySelector(".cursor-blob");

    card?.addEventListener("mousemove", (event) => {
      const e = event as MouseEvent;

      const containerPosition = {
        left: card.getBoundingClientRect().left,
        top: card.getBoundingClientRect().top,
      };

      const blobDimennsions = {
        left: blob?.getBoundingClientRect().width,
        top: blob?.getBoundingClientRect().height,
      };

      const blobPos = {
        x: e.clientX - containerPosition.left - (blobDimennsions.left || 0) / 2,
        y: e.clientY - containerPosition.top - (blobDimennsions.top || 0) / 2,
      };

      const moveAnim = gsap.timeline();

      moveAnim.to(blob, { scale: 1, left: blobPos.x, top: blobPos.y });
    });

    card?.addEventListener("mouseleave", () => {
      gsap.to(blob, {
        scale: 0,
      });
    });
  });
</script>
